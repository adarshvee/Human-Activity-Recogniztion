dim(bostonTest)
#Simple linear regression for training data set
lm.fit= lm(medv~lstat, data = bostonTrain)
#summarize regression data
summary(lm.fit)
#Step 5
plot(bostonData$lstat, bostonData$medv)
abline(lm.fit, lwd=3, col="red")
#Predict confidence interval for test data set
abcde <- data.frame(lstat = bostonTest$lstat)
#lm.pred = predict(lm.fit, list(bostonTest$lstat), interval="confidence")
lm.pred = predict(lm.fit, newdata= abcde, interval="prediction")
#Start conformal preidction
funs = lm.funs()
out.conf = conformal.pred(data.matrix(bostonTrain["lstat"]), unlist(bostonTrain["medv"], use.names=FALSE),
data.matrix(bostonTest["lstat"]), alpha=0.05,
train.fun = funs$train, predict.fun = funs$predict, verb=TRUE)
#Combine results from the two regressions into a matrix
#tab = matrix(c(lm.pred[-samp,"lwr"], lm.pred[-samp,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
tab = matrix(c(lm.pred[,"lwr"], lm.pred[,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
colnames(tab) = c("Clsc_L","Clsc_H", "Con_L", "Con_H", "Obs")
tab
#Convert to dataframe for convenience and add Truth columns
data.final <- data.frame(tab)
data.final$Classic_truth = data.final$Clsc_L <= data.final$Obs &  data.final$Obs <= data.final$Clsc_H
#data.final$Classic_truth = data.final$Clsc_L >= data.final$Obs & data.final$Clsc_H <= data.final$Obs
data.final$Classic_truth <- as.factor(data.final$Classic_truth)
data.final$Con_truth = data.final$Con_L <= data.final$Obs & data.final$Con_H >= data.final$Obs
#data.final$Con_truth = data.final$Con_L >= data.final$Obs & data.final$Con_H <= data.final$Obs
data.final$Con_truth <- as.factor(data.final$Con_truth)
data.final$Classic_width = abs(data.final$Clsc_L - data.final$Clsc_H)
data.final$Con_width = abs(data.final$Con_L - data.final$Con_H)
#Summarize results
cat("Vanilla linear regression error prediction\n")
summary(data.final$Classic_truth)
cat("Conformal prediction using linear regression error prediction\n")
summary(data.final$Con_truth)
cat("Average width of linear regression prediction interval")
mean(data.final$Classic_width)
cat("Average width of CONFORMAL linear regression prediction interval")
mean(data.final$Con_width)
data.final
####
#Conformal prediction for linear regression in classic data set Boston Data
# Author : Adarsh Vijayaraghavan
####
#Start by clearing all variables in the evironment
rm(list=ls())
#Import conformalInference package. Install instructions at : https://github.com/ryantibs/conformal
library(conformalInference)
#linear Regression - data setup
library(MASS)
#Step 1 - import Boston data to a dataframe variable
bostonData <- Boston
#fix(bostonData)
summary(bostonData)
dim(bostonData)
#Partition data set into training and test data
set.seed(42)
bostonTrain<-bostonData[samp<-sample(1:nrow(bostonData),floor(0.8*nrow(bostonData))),]
dim(bostonTrain)
bostonTest<-bostonData[-samp,]
dim(bostonTest)
#Simple linear regression for training data set
lm.fit= lm(medv~lstat, data = bostonTrain)
#summarize regression data
summary(lm.fit)
#Step 5
plot(bostonData$lstat, bostonData$medv)
abline(lm.fit, lwd=3, col="red")
#Predict confidence interval for test data set
abcde <- data.frame(lstat = bostonTest$lstat)
#lm.pred = predict(lm.fit, list(bostonTest$lstat), interval="confidence")
lm.pred = predict(lm.fit, newdata= abcde, interval="prediction")
#Start conformal preidction
funs = lm.funs()
out.conf = conformal.pred(data.matrix(bostonTrain["lstat"]), unlist(bostonTrain["medv"], use.names=FALSE),
data.matrix(bostonTest["lstat"]), alpha=0.05,
train.fun = funs$train, predict.fun = funs$predict, verb=TRUE)
#Combine results from the two regressions into a matrix
#tab = matrix(c(lm.pred[-samp,"lwr"], lm.pred[-samp,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
tab = matrix(c(lm.pred[,"lwr"], lm.pred[,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
colnames(tab) = c("Clsc_L","Clsc_H", "Con_L", "Con_H", "Obs")
tab
#Convert to dataframe for convenience and add Truth columns
data.final <- data.frame(tab)
data.final$Classic_truth = data.final$Clsc_L <= data.final$Obs &  data.final$Obs <= data.final$Clsc_H
#data.final$Classic_truth = data.final$Clsc_L >= data.final$Obs & data.final$Clsc_H <= data.final$Obs
data.final$Classic_truth <- as.factor(data.final$Classic_truth)
data.final$Con_truth = data.final$Con_L <= data.final$Obs & data.final$Con_H >= data.final$Obs
#data.final$Con_truth = data.final$Con_L >= data.final$Obs & data.final$Con_H <= data.final$Obs
data.final$Con_truth <- as.factor(data.final$Con_truth)
data.final$Classic_width = abs(data.final$Clsc_L - data.final$Clsc_H)
data.final$Con_width = abs(data.final$Con_L - data.final$Con_H)
#Summarize results
cat("Vanilla linear regression error prediction\n")
summary(data.final$Classic_truth)
cat("Conformal prediction using linear regression error prediction\n")
summary(data.final$Con_truth)
cat("Average width of linear regression prediction interval")
mean(data.final$Classic_width)
cat("Average width of CONFORMAL linear regression prediction interval")
mean(data.final$Con_width)
data.final
####
#Conformal prediction for linear regression in classic data set Boston Data
# Author : Adarsh Vijayaraghavan
####
#Start by clearing all variables in the evironment
rm(list=ls())
#Import conformalInference package. Install instructions at : https://github.com/ryantibs/conformal
library(conformalInference)
#linear Regression - data setup
library(MASS)
#Step 1 - import Boston data to a dataframe variable
bostonData <- Boston
#fix(bostonData)
summary(bostonData)
dim(bostonData)
#Partition data set into training and test data
set.seed(42)
bostonTrain<-bostonData[samp<-sample(1:nrow(bostonData),floor(0.7*nrow(bostonData))),]
dim(bostonTrain)
bostonTest<-bostonData[-samp,]
dim(bostonTest)
#Simple linear regression for training data set
lm.fit= lm(medv~lstat, data = bostonTrain)
#summarize regression data
summary(lm.fit)
#Step 5
plot(bostonData$lstat, bostonData$medv)
abline(lm.fit, lwd=3, col="red")
#Predict confidence interval for test data set
abcde <- data.frame(lstat = bostonTest$lstat)
#lm.pred = predict(lm.fit, list(bostonTest$lstat), interval="confidence")
lm.pred = predict(lm.fit, newdata= abcde, interval="prediction")
#Start conformal preidction
funs = lm.funs()
out.conf = conformal.pred(data.matrix(bostonTrain["lstat"]), unlist(bostonTrain["medv"], use.names=FALSE),
data.matrix(bostonTest["lstat"]), alpha=0.05,
train.fun = funs$train, predict.fun = funs$predict, verb=TRUE)
#Combine results from the two regressions into a matrix
#tab = matrix(c(lm.pred[-samp,"lwr"], lm.pred[-samp,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
tab = matrix(c(lm.pred[,"lwr"], lm.pred[,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
colnames(tab) = c("Clsc_L","Clsc_H", "Con_L", "Con_H", "Obs")
tab
#Convert to dataframe for convenience and add Truth columns
data.final <- data.frame(tab)
data.final$Classic_truth = data.final$Clsc_L <= data.final$Obs &  data.final$Obs <= data.final$Clsc_H
#data.final$Classic_truth = data.final$Clsc_L >= data.final$Obs & data.final$Clsc_H <= data.final$Obs
data.final$Classic_truth <- as.factor(data.final$Classic_truth)
data.final$Con_truth = data.final$Con_L <= data.final$Obs & data.final$Con_H >= data.final$Obs
#data.final$Con_truth = data.final$Con_L >= data.final$Obs & data.final$Con_H <= data.final$Obs
data.final$Con_truth <- as.factor(data.final$Con_truth)
data.final$Classic_width = abs(data.final$Clsc_L - data.final$Clsc_H)
data.final$Con_width = abs(data.final$Con_L - data.final$Con_H)
#Summarize results
cat("Vanilla linear regression error prediction\n")
summary(data.final$Classic_truth)
cat("Conformal prediction using linear regression error prediction\n")
summary(data.final$Con_truth)
cat("Average width of linear regression prediction interval")
mean(data.final$Classic_width)
cat("Average width of CONFORMAL linear regression prediction interval")
mean(data.final$Con_width)
data.final
####
#Conformal prediction for linear regression in classic data set Boston Data
# Author : Adarsh Vijayaraghavan
####
#Start by clearing all variables in the evironment
rm(list=ls())
#Import conformalInference package. Install instructions at : https://github.com/ryantibs/conformal
library(conformalInference)
#linear Regression - data setup
library(MASS)
#Step 1 - import Boston data to a dataframe variable
bostonData <- Boston
#fix(bostonData)
summary(bostonData)
dim(bostonData)
#Partition data set into training and test data
set.seed(42)
bostonTrain<-bostonData[samp<-sample(1:nrow(bostonData),floor(0.75*nrow(bostonData))),]
dim(bostonTrain)
bostonTest<-bostonData[-samp,]
dim(bostonTest)
#Simple linear regression for training data set
lm.fit= lm(medv~lstat, data = bostonTrain)
#summarize regression data
summary(lm.fit)
#Step 5
plot(bostonData$lstat, bostonData$medv)
abline(lm.fit, lwd=3, col="red")
#Predict confidence interval for test data set
abcde <- data.frame(lstat = bostonTest$lstat)
#lm.pred = predict(lm.fit, list(bostonTest$lstat), interval="confidence")
lm.pred = predict(lm.fit, newdata= abcde, interval="prediction")
#Start conformal preidction
funs = lm.funs()
out.conf = conformal.pred(data.matrix(bostonTrain["lstat"]), unlist(bostonTrain["medv"], use.names=FALSE),
data.matrix(bostonTest["lstat"]), alpha=0.05,
train.fun = funs$train, predict.fun = funs$predict, verb=TRUE)
#Combine results from the two regressions into a matrix
#tab = matrix(c(lm.pred[-samp,"lwr"], lm.pred[-samp,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
tab = matrix(c(lm.pred[,"lwr"], lm.pred[,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
colnames(tab) = c("Clsc_L","Clsc_H", "Con_L", "Con_H", "Obs")
tab
#Convert to dataframe for convenience and add Truth columns
data.final <- data.frame(tab)
data.final$Classic_truth = data.final$Clsc_L <= data.final$Obs &  data.final$Obs <= data.final$Clsc_H
#data.final$Classic_truth = data.final$Clsc_L >= data.final$Obs & data.final$Clsc_H <= data.final$Obs
data.final$Classic_truth <- as.factor(data.final$Classic_truth)
data.final$Con_truth = data.final$Con_L <= data.final$Obs & data.final$Con_H >= data.final$Obs
#data.final$Con_truth = data.final$Con_L >= data.final$Obs & data.final$Con_H <= data.final$Obs
data.final$Con_truth <- as.factor(data.final$Con_truth)
data.final$Classic_width = abs(data.final$Clsc_L - data.final$Clsc_H)
data.final$Con_width = abs(data.final$Con_L - data.final$Con_H)
#Summarize results
cat("Vanilla linear regression error prediction\n")
summary(data.final$Classic_truth)
cat("Conformal prediction using linear regression error prediction\n")
summary(data.final$Con_truth)
cat("Average width of linear regression prediction interval")
mean(data.final$Classic_width)
cat("Average width of CONFORMAL linear regression prediction interval")
mean(data.final$Con_width)
data.final
11/127
116/127
####
#Conformal prediction for linear regression in classic data set Boston Data
# Author : Adarsh Vijayaraghavan
####
#Start by clearing all variables in the evironment
rm(list=ls())
#Import conformalInference package. Install instructions at : https://github.com/ryantibs/conformal
library(conformalInference)
#linear Regression - data setup
library(MASS)
#Step 1 - import Boston data to a dataframe variable
bostonData <- Boston
#fix(bostonData)
summary(bostonData)
dim(bostonData)
#Partition data set into training and test data
set.seed(4)
bostonTrain<-bostonData[samp<-sample(1:nrow(bostonData),floor(0.75*nrow(bostonData))),]
dim(bostonTrain)
bostonTest<-bostonData[-samp,]
dim(bostonTest)
#Simple linear regression for training data set
lm.fit= lm(medv~lstat, data = bostonTrain)
#summarize regression data
summary(lm.fit)
#Step 5
plot(bostonData$lstat, bostonData$medv)
abline(lm.fit, lwd=3, col="red")
#Predict confidence interval for test data set
abcde <- data.frame(lstat = bostonTest$lstat)
#lm.pred = predict(lm.fit, list(bostonTest$lstat), interval="confidence")
lm.pred = predict(lm.fit, newdata= abcde, interval="prediction")
#Start conformal preidction
funs = lm.funs()
out.conf = conformal.pred(data.matrix(bostonTrain["lstat"]), unlist(bostonTrain["medv"], use.names=FALSE),
data.matrix(bostonTest["lstat"]), alpha=0.05,
train.fun = funs$train, predict.fun = funs$predict, verb=TRUE)
#Combine results from the two regressions into a matrix
#tab = matrix(c(lm.pred[-samp,"lwr"], lm.pred[-samp,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
tab = matrix(c(lm.pred[,"lwr"], lm.pred[,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
colnames(tab) = c("Clsc_L","Clsc_H", "Con_L", "Con_H", "Obs")
#Convert to dataframe for convenience and add Truth columns
data.final <- data.frame(tab)
data.final$Classic_truth = data.final$Clsc_L <= data.final$Obs &  data.final$Obs <= data.final$Clsc_H
#data.final$Classic_truth = data.final$Clsc_L >= data.final$Obs & data.final$Clsc_H <= data.final$Obs
data.final$Classic_truth <- as.factor(data.final$Classic_truth)
data.final$Con_truth = data.final$Con_L <= data.final$Obs & data.final$Con_H >= data.final$Obs
#data.final$Con_truth = data.final$Con_L >= data.final$Obs & data.final$Con_H <= data.final$Obs
data.final$Con_truth <- as.factor(data.final$Con_truth)
data.final$Classic_width = abs(data.final$Clsc_L - data.final$Clsc_H)
data.final$Con_width = abs(data.final$Con_L - data.final$Con_H)
#Summarize results
cat("Vanilla linear regression error prediction\n")
summary(data.final$Classic_truth)
cat("Conformal prediction using linear regression error prediction\n")
summary(data.final$Con_truth)
cat("Average width of linear regression prediction interval")
mean(data.final$Classic_width)
cat("Average width of CONFORMAL linear regression prediction interval")
mean(data.final$Con_width)
data.final
####
#Conformal prediction for linear regression in classic data set Boston Data
# Author : Adarsh Vijayaraghavan
####
#Start by clearing all variables in the evironment
rm(list=ls())
#Import conformalInference package. Install instructions at : https://github.com/ryantibs/conformal
library(conformalInference)
#linear Regression - data setup
library(MASS)
#Step 1 - import Boston data to a dataframe variable
bostonData <- Boston
summary(bostonData)
dim(bostonData)
#Partition data set into training and test data
set.seed(4)
bostonTrain<-bostonData[samp<-sample(1:nrow(bostonData),floor(0.78*nrow(bostonData))),]
dim(bostonTrain)
bostonTest<-bostonData[-samp,]
dim(bostonTest)
#Simple linear regression for training data set
lm.fit= lm(medv~lstat, data = bostonTrain)
#summarize regression data
summary(lm.fit)
#Step 5
plot(bostonData$lstat, bostonData$medv)
abline(lm.fit, lwd=3, col="red")
#Predict confidence interval for test data set
abcde <- data.frame(lstat = bostonTest$lstat)
#lm.pred = predict(lm.fit, list(bostonTest$lstat), interval="confidence")
lm.pred = predict(lm.fit, newdata= abcde, interval="prediction")
#Start conformal preidction
funs = lm.funs()
out.conf = conformal.pred(data.matrix(bostonTrain["lstat"]), unlist(bostonTrain["medv"], use.names=FALSE),
data.matrix(bostonTest["lstat"]), alpha=0.05,
train.fun = funs$train, predict.fun = funs$predict, verb=TRUE)
#Combine results from the two regressions into a matrix
#tab = matrix(c(lm.pred[-samp,"lwr"], lm.pred[-samp,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
tab = matrix(c(lm.pred[,"lwr"], lm.pred[,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
colnames(tab) = c("Clsc_L","Clsc_H", "Con_L", "Con_H", "Obs")
#Convert to dataframe for convenience and add Truth columns
data.final <- data.frame(tab)
data.final$Classic_truth = data.final$Clsc_L <= data.final$Obs &  data.final$Obs <= data.final$Clsc_H
#data.final$Classic_truth = data.final$Clsc_L >= data.final$Obs & data.final$Clsc_H <= data.final$Obs
data.final$Classic_truth <- as.factor(data.final$Classic_truth)
data.final$Con_truth = data.final$Con_L <= data.final$Obs & data.final$Con_H >= data.final$Obs
#data.final$Con_truth = data.final$Con_L >= data.final$Obs & data.final$Con_H <= data.final$Obs
data.final$Con_truth <- as.factor(data.final$Con_truth)
data.final$Classic_width = abs(data.final$Clsc_L - data.final$Clsc_H)
data.final$Con_width = abs(data.final$Con_L - data.final$Con_H)
#Summarize results
cat("Vanilla linear regression error prediction\n")
summary(data.final$Classic_truth)
cat("Conformal prediction using linear regression error prediction\n")
summary(data.final$Con_truth)
cat("Average width of linear regression prediction interval")
mean(data.final$Classic_width)
cat("Average width of CONFORMAL linear regression prediction interval")
mean(data.final$Con_width)
data.final
####
#Conformal prediction for linear regression in classic data set Boston Data
# Author : Adarsh Vijayaraghavan
####
#Start by clearing all variables in the evironment
rm(list=ls())
#Import conformalInference package. Install instructions at : https://github.com/ryantibs/conformal
library(conformalInference)
#linear Regression - data setup
library(MASS)
#Step 1 - import Boston data to a dataframe variable
bostonData <- Boston
summary(bostonData)
dim(bostonData)
#Partition data set into training and test data
set.seed(4)
bostonTrain<-bostonData[samp<-sample(1:nrow(bostonData),floor(0.78*nrow(bostonData))),]
dim(bostonTrain)
bostonTest<-bostonData[-samp,]
dim(bostonTest)
#Simple linear regression for training data set
lm.fit= lm(medv~lstat, data = bostonTrain)
#summarize regression data
summary(lm.fit)
#Step 5
plot(bostonData$lstat, bostonData$medv)
abline(lm.fit, lwd=3, col="red")
#Predict confidence interval for test data set
abcde <- data.frame(lstat = bostonTest$lstat)
#lm.pred = predict(lm.fit, list(bostonTest$lstat), interval="confidence")
lm.pred = predict(lm.fit, newdata= abcde, interval="prediction")
#Start conformal preidction
funs = lm.funs()
out.conf = conformal.pred(data.matrix(bostonTrain["lstat"]), unlist(bostonTrain["medv"], use.names=FALSE),
data.matrix(bostonTest["lstat"]), alpha=0.05,
train.fun = funs$train, predict.fun = funs$predict, verb=TRUE)
#Combine results from the two regressions into a matrix
#tab = matrix(c(lm.pred[-samp,"lwr"], lm.pred[-samp,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
tab = matrix(c(lm.pred[,"lwr"], lm.pred[,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
colnames(tab) = c("Clsc_L","Clsc_H", "Con_L", "Con_H", "Obs")
#Convert to dataframe for convenience and add Truth columns
data.final <- data.frame(tab)
data.final$Classic_truth = data.final$Clsc_L <= data.final$Obs &  data.final$Obs <= data.final$Clsc_H
#data.final$Classic_truth = data.final$Clsc_L >= data.final$Obs & data.final$Clsc_H <= data.final$Obs
data.final$Classic_truth <- as.factor(data.final$Classic_truth)
data.final$Con_truth = data.final$Con_L <= data.final$Obs & data.final$Con_H >= data.final$Obs
#data.final$Con_truth = data.final$Con_L >= data.final$Obs & data.final$Con_H <= data.final$Obs
data.final$Con_truth <- as.factor(data.final$Con_truth)
data.final$Classic_width = abs(data.final$Clsc_L - data.final$Clsc_H)
data.final$Con_width = abs(data.final$Con_L - data.final$Con_H)
#Summarize results
cat("Vanilla linear regression error prediction\n")
summary(data.final$Classic_truth)
cat("Conformal prediction using linear regression error prediction\n")
summary(data.final$Con_truth)
cat("Average width of linear regression prediction interval")
mean(data.final$Classic_width)
cat("Average width of CONFORMAL linear regression prediction interval")
mean(data.final$Con_width)
data.final
####
#Conformal prediction for linear regression in classic data set Boston Data
# Author : Adarsh Vijayaraghavan
####
#Start by clearing all variables in the evironment
rm(list=ls())
#Import conformalInference package. Install instructions at : https://github.com/ryantibs/conformal
library(conformalInference)
#linear Regression - data setup
library(MASS)
#Step 1 - import Boston data to a dataframe variable
bostonData <- Boston
summary(bostonData)
dim(bostonData)
#Partition data set into training and test data
set.seed(4)
bostonTrain<-bostonData[samp<-sample(1:nrow(bostonData),floor(0.78*nrow(bostonData))),]
dim(bostonTrain)
bostonTest<-bostonData[-samp,]
dim(bostonTest)
#Simple linear regression for training data set
lm.fit= lm(medv~lstat, data = bostonTrain)
#summarize regression data
summary(lm.fit)
#Step 5
plot(bostonData$lstat, bostonData$medv)
abline(lm.fit, lwd=3, col="red")
#Predict confidence interval for test data set
abcde <- data.frame(lstat = bostonTest$lstat)
#lm.pred = predict(lm.fit, list(bostonTest$lstat), interval="confidence")
lm.pred = predict(lm.fit, newdata= abcde, interval="prediction")
#Start conformal preidction
funs = lm.funs()
out.conf = conformal.pred(data.matrix(bostonTrain["lstat"]), unlist(bostonTrain["medv"], use.names=FALSE),
data.matrix(bostonTest["lstat"]), alpha=0.05,
train.fun = funs$train, predict.fun = funs$predict, verb=TRUE)
#Combine results from the two regressions into a matrix
#tab = matrix(c(lm.pred[-samp,"lwr"], lm.pred[-samp,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
tab = matrix(c(lm.pred[,"lwr"], lm.pred[,"upr"], out.conf$lo, out.conf$up, bostonTest[,'medv']), ncol=5)
colnames(tab) = c("Clsc_L","Clsc_H", "Con_L", "Con_H", "Obs")
#Convert to dataframe for convenience and add Truth columns
data.final <- data.frame(tab)
data.final$Classic_truth = data.final$Clsc_L <= data.final$Obs &  data.final$Obs <= data.final$Clsc_H
#data.final$Classic_truth = data.final$Clsc_L >= data.final$Obs & data.final$Clsc_H <= data.final$Obs
data.final$Classic_truth <- as.factor(data.final$Classic_truth)
data.final$Con_truth = data.final$Con_L <= data.final$Obs & data.final$Con_H >= data.final$Obs
#data.final$Con_truth = data.final$Con_L >= data.final$Obs & data.final$Con_H <= data.final$Obs
data.final$Con_truth <- as.factor(data.final$Con_truth)
data.final$Classic_width = abs(data.final$Clsc_L - data.final$Clsc_H)
data.final$Con_width = abs(data.final$Con_L - data.final$Con_H)
#Summarize results
cat("Vanilla linear regression error prediction\n")
summary(data.final$Classic_truth)
cat("Conformal prediction using linear regression error prediction\n")
summary(data.final$Con_truth)
cat("Average width of linear regression prediction interval")
mean(data.final$Classic_width)
cat("Average width of CONFORMAL linear regression prediction interval")
mean(data.final$Con_width)
data.final
model <- train(Activity~., train_dataset, method='glmnet', tuneGrid=expand.grid(.alpha=0:1,    .lambda=0:30/10))
library(caret)
install.packages("caret")
library(caret)
model <- train(Activity~., train_dataset, method='glmnet', tuneGrid=expand.grid(.alpha=0:1,    .lambda=0:30/10))
model <- train(Activity~., train_dataset, method='glmnet', tuneGrid=expand.grid(.alpha=0:1,    .lambda=0:30/10))
#Clear All
rm(list=ls())
library("klaR")
library("data.table")
library(glmnet)
setwd("G:\\R\\AlgLearningTheory\\Project\\UCI HAR Dataset\\UCI HAR Dataset")
features <- read.table("features.txt")
act_labels <- read.table("activity_labels.txt")
train_features <- read.table("train\\X_train.txt")
train_labels <- read.table("train\\y_train.txt")
test_features <- read.table("test\\X_test.txt")
test_labels <- read.table("test\\y_test.txt")
subject_train <- read.table("train//subject_train.txt")
subject_test <- read.table("test//subject_test.txt")
neatify <- function(x) {
gsub(",", "", x)
gsub("(", "", x,fixed=TRUE)
gsub(")", "", x)
gsub(">", "", x)
gsub("-", "", x)
}
features <- data.frame(lapply(features, neatify))
colnames(train_features) <- c(t(features)[2,])
colnames(test_features) <- c(t(features)[2,])
colnames(train_labels) <- c("act")
colnames(test_labels) <- c("act")
colnames(act_labels) <- c("act", "Activity")
train_dataset <- cbind(train_features,train_labels )
test_dataset <- cbind(test_features,test_labels )
train_dataset <- merge(train_dataset, act_labels )
test_dataset <- merge(test_dataset,act_labels )
train_dataset <- subset(train_dataset, select = -c(act))
test_dataset <- subset(test_dataset, select = -c(act))
library(caret)
model <- train(Activity~., train_dataset, method='glmnet', tuneGrid=expand.grid(.alpha=0:1,    .lambda=0:30/10))
